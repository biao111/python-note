Beautiful Soup库笔记
功能：提供简单的、python式函数用来处理导航、处理分析树等功能
安装：pip install beautifulsoup4
查看安装：pip freeze
beautifulsoup4解析器
    1.python标准库：
        使用方法：BeautifulSoup(markup,"html.parser")
    2.lxml HTML解析器：
        使用方法：BeautifulSoup(markup,"lxml")
        安装：pip install lxml

使用：BeautifulSoup
1.导包：from bs4 import Beautifulsoup
2.初始化：soup = BeautifulSoup(html解析的代码段,'lxml')
3.调用soup的方法和属性，解析代码段
    1.查看初始化的代码段：soup.prettify()
    2.查看文档中tag属性值：soup.tag.string #tag：例子title.当有多个节点的时候，当前的这种模式，只能匹配到第一个节点，其他节点都会被忽略
    3.获取节点的属性值：soup.p.attrs  #节点的属性值：p  class='title'.attrs:返回标签的所有属性值，返回的是一个字典
        1.soup.p.attrs
        2.soup.p.attrs['name']  #获取具体的值
        3.soup.p['name']    #获取字典值一样
        #name：唯一值返回的是字符串，class：多个值，返回的是列表
    4.获取节点的名称:soup.title.name   #节点的名称：p name='dromouse' 
    5.嵌套调用：soup.head.title
    6.获取子节点:
        1.soup.p.contents    #返回的是一个列表，列表的每一个元素都是p节点的直接子节点，返回结果没直接把孙节点选出来返回，用于获取直接子节点列表
        2.soup.p.children   #返回一个迭代器，通过for循环进行遍历，和contents返回的结果是一样的
    7.获取子节点和孙节点：soup.p.descendants    #返回的是一个迭代器，区别：孙节点单独拿了出来，值也被单独拿出来了
    8.获取父节点：soup.a.parent     #获取直接父节点
    9.获取所有的祖先节点：soup.a.parents    #获取所有的祖先节点
    10.获取兄弟节点：
        1.获取该节点的下一个兄弟节点：soup.a.next_sibling
        2.获取该节点的上一个兄弟节点：soup.a.previous_sibling
        3.获取该节点的下一个所有兄弟节点：soup.a.next_siblings  #返回的是一个迭代器
        4.获取该节点的上一个所有兄弟节点：soup.a.previous_siblings  #返回的是一个迭代器
    11.方法选择器
        1.find_all选择器：
            1，通过节点名查询
                1.soup.find_all(name='ul')  #查询含有该名字的标签，已列表形式返回
                #传入参数name，可以获取当前文本中所有的标签数据
                2.嵌套查询：for ul in soup.find_all(name='ul'):
                                print(ul.find_all(name='li'))
                3.获取嵌套标签的数值： for ul in soup.find_all(name='ul'):
                                        for li in ul.find_all(name='li'):
                                            print(li.string)
            2.通过属性查询：
                1.atrrs传入
                    1.通过属性的id：soup.find_all(attrs={"id":"list-1"})  #列表形式
                    2.通过属性的name：soup.find_all(sttrs={"name":'elements'})
                2.常用属性的传入
                    1.id:soup.find_all(id="list-1")
                    2.class:soup.find_all(class_="list")    #class在python中是一个关键字，要在class后加下划线
                3.通过text文本来获取匹配的文本(正则表达式),返回列表
                    例：soup.find_all(text=re.comple("Foo"))
        2.find选择器
            1.find返回的是单个的元素
            2.find_next_parents 和find_parent:闲着返回所有祖先点，后者返回直接父节点
            3.find_next_sibliing 和 find_next_sibliings：前者返回所有的兄弟节点，后者返回后面第一个兄弟节点
            4.find_previous_siblings 和 find_previous_sibling:前者返回所有兄弟节点，后者返回前第一个兄弟节点
            5.find_all_next 和 find_next:前者返回节点后所有符合条件的节点，后者是返回节点后第一个符合条件的节点
            6.find_all_previous 和find_previous:前者返回节点前所有符合条件的节点，后者返回节点前的第一个符合条件的节点
        3.css选择器
            #使用css选择器，调用select方法，传入css选择器即可
            1.div的class传入：soup.select(".panel .panel-heading")  # . 表示的是class,空格前是上一级，空格后是下一级
            2.ul的li标签：soup.soup.select("ul li")
            3.获取ul的id，li的class的标签：soup.select("#list-2 .element")
            4.嵌套选择：先获取ul标签，tag类型，for调用select方法再次传入css选择器
                        for ul in soup.select("ul"): #获取所有的ul标签
                            for li in ul.select("li"):  #获取所有的li标签
                                print(li.string)    #手机用string方法获取文本内繁荣
            5.使用属性获取元素：for ul in soup.select("ul"):
                                    print(ul["id"])      
            
        *建议：使用find和find_all查询匹配单个结果或多个结果